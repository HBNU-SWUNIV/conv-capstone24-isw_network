using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Linq;
using Photon.Pun;
using Photon.Pun.UtilityScripts;
using TMPro;
using UnityEngine.SceneManagement;
using System;
using Photon.Realtime;
public class Leaderboard : MonoBehaviour
{
    public GameObject playersHolder;

    [Header("Options")]
    public float refreshRate  = 1f;

    [Header("UI")]
    public GameObject[] slots;
    [Space]
    public TextMeshProUGUI[] scoreTexts;
    public TextMeshProUGUI[] nameTexts;

    // Start is called before the first frame update

    void Start()
    {
        InvokeRepeating(nameof(Refresh), time: 0f, refreshRate);
    }

    public void Refresh()
    {
        foreach (var slot in slots)
        {
            slot.SetActive(false);
        }

        string currentSceneName = PlayerPrefs.GetString("CurrentSceneName", "Game1");

        List<Player> sortedPlayerList = new List<Player>(); 
        
        if (currentSceneName == "Game2")
        {
            sortedPlayerList = (from player in PhotonNetwork.PlayerList
                                let score = player.CustomProperties.ContainsKey("score") ? (float)player.CustomProperties["score"] : 0f
                                orderby score descending
                                select player).ToList();
        }


        else
        {
            sortedPlayerList = (from player in PhotonNetwork.PlayerList
                            let score = player.CustomProperties.ContainsKey("score") ? (float)player.CustomProperties["score"] : 0f
                            where score > 0f
                            orderby score ascending
                            select player).ToList();
        }



        int i = 0;
        foreach (var player in sortedPlayerList)
        {
            slots[i].SetActive(true);

            if (string.IsNullOrEmpty(player.NickName))
                player.NickName = "unnamed";

            float score = player.CustomProperties.ContainsKey("score") ? (float)player.CustomProperties["score"] : 0f;


            string scoreText = (score % 1 == 0) ? score.ToString("F0") : score.ToString("F3");

            nameTexts[i].text = $"{i + 1}. {player.NickName}";
            scoreTexts[i].text = scoreText;

            i++;
            }

        var zeroScorePlayers = (from player in PhotonNetwork.PlayerList
                            let score = player.CustomProperties.ContainsKey("score") ? (float)player.CustomProperties["score"] : 0f
                            where score == 0f  // 0점인 플레이어 찾기
                            select player).ToList();

        foreach (var player in zeroScorePlayers)
        {
            slots[i].SetActive(true);

            if (string.IsNullOrEmpty(player.NickName))
                player.NickName = "unnamed";

            float score = player.CustomProperties.ContainsKey("score") ? (float)player.CustomProperties["score"] : 0f;
            string scoreText = (score % 1 == 0) ? score.ToString("F0") : score.ToString("F3");

            nameTexts[i].text = $"{i + 1}. {player.NickName}";
            scoreTexts[i].text = scoreText;

            i++;
        }

}
}
