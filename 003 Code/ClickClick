using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEngine.UI;
using Photon.Pun;
using Photon.Realtime;

public class Game2 : MonoBehaviour
{
    public Button[] ClickButton;
    public Button ReturnButton;
    public Text Countdown;
    public Text Timer;
    public Text Score;
    public Text Result;
    public float timeLimit = 15f;

    private float timeRemaining;
    private float score = 0f;
    private bool gameStarted = false;

    void Start()
    {
        foreach (Button button in ClickButton)
        {
            button.gameObject.SetActive(false);
        }
        ReturnButton.gameObject.SetActive(false); 

        Countdown.gameObject.SetActive(true); 
        StartCoroutine(StartCountdown());
    }

    void Update()
    {
        if (gameStarted)
        {
            if (timeRemaining > 0)
            {
                timeRemaining -= Time.deltaTime;
                Timer.text = "TIME : " + Mathf.Round(timeRemaining).ToString();
            }
            else
            {
                EndGame();
            }
        }
    }

    IEnumerator StartCountdown()
    {
        int countdown = 3;
        while (countdown > 0)
        {

            Countdown.text = countdown.ToString();
            yield return new WaitForSeconds(1f);
            countdown--;
        }

        Countdown.text = "GO !";
        yield return new WaitForSeconds(1f);
        Countdown.gameObject.SetActive(false); 

        foreach (Button button in ClickButton) 
        {
            button.gameObject.SetActive(true);
        }

        gameStarted = true;
        timeRemaining = timeLimit;
        foreach (Button button in ClickButton)
        {
            button.onClick.AddListener(() => OnButtonClick());
        }
    }

    public void OnButtonClick()
    {
        if (gameStarted)
        {
            score += 1;
            Score.text = "SCORE : " + score.ToString();
        }
    }

    void EndGame()
    {
        gameStarted = false;
        Result.text = "GAME OVER !\nSCORE : " + score.ToString();
        SaveFinalScore(score);
        ReturnButton.gameObject.SetActive(true); 
        PlayerPrefs.SetString("CurrentSceneName", SceneManager.GetActiveScene().name);
        string currentSceneName = SceneManager.GetActiveScene().name;
        Debug.Log("Current Scene Name: " + currentSceneName);
        StartCoroutine(DelayedLeaderboardTransition());

    }


    IEnumerator DelayedLeaderboardTransition()
    {

        yield return new WaitForSeconds(3f);

        SceneManager.LoadScene("Leaderboard");
    }
    
    public void GameScene() 
    {
        SceneManager.LoadScene("GameSelect");
    }


    public void SaveFinalScore(float finalScore)
    {
        ExitGames.Client.Photon.Hashtable playerProps = new ExitGames.Client.Photon.Hashtable();
        playerProps["score"] = finalScore; // Photon Custom Properties에 점수 저장
        PhotonNetwork.LocalPlayer.SetCustomProperties(playerProps);

    }

    void OnSceneLoaded(Scene scene, LoadSceneMode mode)
    {
        if (scene.name == "Leaderboard")
        {
            Leaderboard leaderboard = FindObjectOfType<Leaderboard>();
            if (leaderboard != null)
            {
                leaderboard.Refresh();
            }
        }
    }
}
