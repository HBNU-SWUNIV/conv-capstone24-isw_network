using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEngine.UI;
using Photon.Pun;
using Photon.Realtime;


public class Game3 : MonoBehaviour
{
    public UnityEngine.UI.Button ReturnButton;
    public Text Countdown;
    public Text Result;
    /*public Text Timer;*/
    /*public float timeLimit = 10f;*/
    /*private float timeRemaining;*/

    public Text Message;
    private bool signalActive = false;
    private float reactionTime;
    private float startTime;

    private bool gameStarted = false;

    void Start()
    {
        Message.gameObject.SetActive(false);
        ReturnButton.gameObject.SetActive(false); 
        Countdown.gameObject.SetActive(true); 
        StartCoroutine(StartCountdown());

        /*StartCoroutine(SignalRoutine());*/
    }

    void Update()
    {
        /*if (gameStarted)
        {
            if (timeRemaining > 0)
            {
                timeRemaining -= Time.deltaTime;
                Timer.text = "Time : " + Mathf.Round(timeRemaining).ToString();
            }
            else
            {
                EndGame();
            }
        }*/

        if (signalActive && Input.GetMouseButtonDown(0))
        {
            reactionTime = Time.time - startTime;
            Message.text = "REACTION TIME : " + reactionTime.ToString("F3");
            signalActive = false;
            SaveFinalScore(reactionTime);
            EndGame();
        }
    }

    IEnumerator StartCountdown()
    {
        int countdown = 3;
        while (countdown > 0)
        {

            Countdown.text = countdown.ToString();
            yield return new WaitForSeconds(1f);
            countdown--;
        }

        Countdown.text = "GO !";
        yield return new WaitForSeconds(1f);
        Countdown.gameObject.SetActive(false); 

        Message.gameObject.SetActive(true);
        gameStarted = true;
        /*timeRemaining = timeLimit;*/
        StartCoroutine(SignalRoutine());
    }

    IEnumerator SignalRoutine()
    {
        Message.text = "READY . .";
        yield return new WaitForSeconds(Random.Range(2, 5));
        Message.text = "CLICK NOW !";
        signalActive = true;
        startTime = Time.time;

        yield return new WaitForSeconds(5f);
        if (signalActive)
        {
            Message.text = "TOO SLOW . .";
            signalActive = false;
            EndGame() ;
        }
    }

    void EndGame()
    {
        gameStarted = false;
        Result.text = "GAME OVER !";
        ReturnButton.gameObject.SetActive(true); 
        PlayerPrefs.SetString("CurrentSceneName", SceneManager.GetActiveScene().name);
        StartCoroutine(DelayedLeaderboardTransition());
        string currentSceneName = SceneManager.GetActiveScene().name;
        Debug.Log("Current Scene Name: " + currentSceneName);
    }

    IEnumerator DelayedLeaderboardTransition()
    {
        yield return new WaitForSeconds(3f);

        SceneManager.LoadScene("Leaderboard");
    }
    public void GameScene() 
    {
        SceneManager.LoadScene("GameSelect");
    }

        public void SaveFinalScore(float finalScore)
    {
        ExitGames.Client.Photon.Hashtable playerProps = new ExitGames.Client.Photon.Hashtable();
        playerProps["score"] = finalScore; // Photon Custom Properties에 점수 저장
        PhotonNetwork.LocalPlayer.SetCustomProperties(playerProps);

        Debug.Log("Player score saved: " + PhotonNetwork.LocalPlayer.CustomProperties["score"]);
    }

    void OnSceneLoaded(Scene scene, LoadSceneMode mode)
    {
        if (scene.name == "Leaderboard")
        {
            Leaderboard leaderboard = FindObjectOfType<Leaderboard>();
            if (leaderboard != null)
            {
                leaderboard.Refresh();
            }
        }
    }
}
